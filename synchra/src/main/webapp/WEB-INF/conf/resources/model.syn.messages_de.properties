model.syn = Synchra
model.syn.Activity = Maßnahme
model.syn.Activity.activityId = Maßnahmen ID
model.syn.Activity.costs = Kosten
model.syn.Activity.description = Beschreibung
model.syn.Activity.effectDate = Wirkdatum
model.syn.Activity.kind = Art
model.syn.Activity.name = Name
model.syn.Activity.riskCostImpact = Risikoauswirkung (\u20AC)
model.syn.Activity.riskProbImpact = Risiko Wahrscheinlichkeitsauswirkung
model.syn.Activity.state = Status
model.syn.Activity.tooltip = Handlung, Regelung o. Ä., die etwas Bestimmtes bewirken soll.\n\nIm Kontext unserer Applikation verändern Maßnahmen die KPIs, die Komponenten oder Risiken beschreiben (Preis, Eintrittswahrscheinlichkeit,...)
model.syn.Activity.valuations = Bewertungen
model.syn.ActivityKind = Maßnahmenart
model.syn.ActivityKind.ORGANISATORIC = organisatorisch
model.syn.ActivityKind.TECHNICAL = technisch
model.syn.ActivityState = Maßnahmenstatus
model.syn.ActivityState.DONE = umgesetzt
model.syn.ActivityState.IDEA = Idee
model.syn.ActivityState.IN_PROGRESS = in Umsetzung
model.syn.ActivityState.REJECTED = verworfen
model.syn.Company = Gesellschaft
model.syn.Company.adressInformations = Adressinformationen
model.syn.Company.canDeliver = kann liefern
model.syn.Company.contact = Ansprechpartner
model.syn.Company.contactPerson = Kontaktperson
model.syn.Company.mayDeliver = kann liefern
model.syn.Company.name = Name
model.syn.Company.phone = Telefonnummer
model.syn.Company.structure = Struktur
model.syn.Company.tooltip = Eine BGB-Gesellschaft bzw. eine GbR liegt vor, wenn mindestens zwei Personen vereinbaren, zu einem gemeinsamen Zweck zusammenzuwirken und diesen Zweck zu fördern. Die gesetzliche Grundlage findet sich im Bürgerlichen Gesetzbuch (BGB).\n\n(IHK Frankfurt am Main)\n\nHier auch im Sinne von "Unternehmen" verwendet.\n\nGesellschaften können in unserer Applikation in zwei unterschiedlichen Rollen auftreten: als Hersteller einer Komponente oder als Lieferant einer solchen.\n
model.syn.CompanyStructure = Rechtsform
model.syn.CompanyStructure.AG = AG
model.syn.CompanyStructure.CoKG = Co KG
model.syn.CompanyStructure.GmbH = GmbH
model.syn.Component = Komponente
model.syn.Component.canBeDelivered = Mögliche Lieferanten
model.syn.Component.componentID = Komponenten-ID
model.syn.Component.consistsOf = besteht aus
model.syn.Component.goalGap = Ziellücke
model.syn.Component.goalPrice = Ziel
model.syn.Component.isAffectedByProblem = ist betroffen von Problem
model.syn.Component.name = Name
model.syn.Component.pictures = Bilder
model.syn.Component.price = Preis
model.syn.Component.priceActivityContribution = Eigenanteil Plan
model.syn.Component.priceActivityPrognose = Eigenanteil Prognose
model.syn.Component.priceAfterActivities = Plan
model.syn.Component.prognose = Prognose
model.syn.Component.risks = Risiken
model.syn.Component.supplier = Lieferant
model.syn.Component.suppliers = Lieferanten
model.syn.Component.tooltip = Als Komponente bezeichnen wir eine Verallgemeinerung (im Sinne der objektorientierten Modellierung: Obertyp oder auch Superentitätstyp) von Baugruppen und Einzelteilen. Die Komponente vererbt Ihre Eigenschaften an Baugruppe und Einzelteil. Komponenten haben keine expliziten Ausprägungen im Instanzeneditor. In der Applikation werden die Ausprägungen der Untertypen angezeigt.
model.syn.Component.used = genutzt in
model.syn.Component.weight = Gewicht (kg)
model.syn.Component.weightActivityContribution = Eigenanteil Gewicht M
model.syn.Component.weightAfterActivities = Gewicht nach Maßnahmen
model.syn.ComponentNode = Komponentenknoten
model.syn.ComponentNode.children = Children
model.syn.ComponentNode.component = Component
model.syn.ComponentNode.connection = Connection
model.syn.ComponentNode.goalPrice = Ziel
model.syn.ComponentNode.name = Name
model.syn.ComponentNode.parent = Parent
model.syn.ComponentNode.price = Preis
model.syn.ComponentNode.priceActivityContribution = Eigenanteil Plan
model.syn.ComponentNode.priceActivityPrognose = Eigenanteil Prognose
model.syn.ComponentNode.priceAfterActivities = Plan
model.syn.ComponentNode.product = Product
model.syn.ComponentNode.prognose = Prognose
model.syn.Connection = Verbindung
model.syn.Connection.consistsOf = besteht aus
model.syn.Connection.countries = Countries
model.syn.Connection.position = Lage
model.syn.Connection.rule = Regel
model.syn.Connection.tooltip = Die Verbindung ist die Auflösung der n:m-Beziehung Komponente besteht aus Komponente und bildet einen kreislosen! gerichteten Graphen, dessen Wurzel jeweils das Produkt ist und dessen Blätter die Einzelteile sind
model.syn.Connection.used = genutzt in
model.syn.ConstructionGroup = Baugruppe
model.syn.ConstructionGroup.componentID = Baugruppen-Nr.
model.syn.ConstructionGroup.consistsOf = besteht aus
model.syn.ConstructionGroup.constructionGroupId = Baugruppen-ID
model.syn.ConstructionGroup.goalPrice = Ziel
model.syn.ConstructionGroup.price = Preis
model.syn.ConstructionGroup.priceAfterActivities = Plan
model.syn.ConstructionGroup.prognose = Prognose
model.syn.ConstructionGroup.tooltip = Eine Baugruppe (lt. DIN 199 kurz Gruppe genannt) ist ein in sich geschlossener, aus zwei oder mehr Einzelteilen oder Baugruppen niederer Ordnung bestehender Gegenstand, der in der Regel wieder zerlegbar ist (s. DIN 199 Technische Produktdokumentation).\n(Wikipedia, 2025)\nZur Vereinfachung wollen wir hier annehmen, dass auch an sich fixe Zusammenfügungen wie z.B. eine Verschweißung oder Verklebung \u201Eprinzipiell\u201C wieder trennbar sind.\nSomit entspricht auch das Produkt einer Baugruppe (und auch eine Komponente, siehe 1.1.2) und eine Baugruppe kann auch max. einem Produkt entsprechen (vergl. die BMW-Motoren, die auch an andere Marktteilnehmer verkauft wurden). Zu jedem Produkt muss es eine Baugruppe geben.\nJe nach betrieblicher Anforderung kann es sein, dass eine Baugruppe zunächst \u201Eleer\u201C ist, also keine untergeordnete Baugruppe und keine Teile enthält. Dies kann z.B. bei einer Top-Down-Konstruktion so vorkommen. Ziel der Konstruktionsarbeit muss es dann sein, die am Anfang leere Baugruppe zu befüllen.\n
model.syn.ConstructionGroup.weight = Gewicht
model.syn.ConstructionGroup.weightAfterActivities = Gewicht nach Maßnahmen
model.syn.ContactPerson = Ansprechpartner
model.syn.Country = Land
model.syn.Country.name = Name
model.syn.Material = Material
model.syn.Material.name = Name
model.syn.PartCatalog = Teilekatalog
model.syn.PartCatalog.materialCompany = Material company
model.syn.PartCatalog.materialGroups = Materialgruppierung
model.syn.PartCatalog.name = Name
model.syn.PartCatalog.partGroups = Gesellschaftsgruppierung
model.syn.PartCatalog.parts = Teile
model.syn.PartCatalog.tooltip = Ein Teilekatalog enthält Einzelteile. Dabei ist es möglich, einen Katalog in unterschiedliche Kategorien hierarchisch aufzuteilen. Es gibt ansonsten keine Einschränkungen für die Verwendung von Teilekatalogen. Insbesondere muss sich ein Teilekatalog nicht auf ein Produkt beziehen. Ein Teilekatalog hat einen Namen, und zeigt die Teile in einer vorbestimmten Hierarchie der Kategorien an (Anforderung an die Oberfläche!)
model.syn.PartsGroup = Gruppierung
model.syn.PartsGroup.name = Name
model.syn.PartsGroup.parts = Parts
model.syn.PartsGroup.tooltip = Es wird ein Objekttyp \u201EGruppierung\u201C eingeführt, der lediglich mit einem Namen attributiert ist und eine n:m-Relation zum generischen Fachobjekttyp \u201EFachobjekt\u201C hat. Zusätzlich legen wir für jede gewünschte Kombination aus Gruppierungen, die unsere Teilekataloge anzeigen sollen, eine n:m-Relation zwischen Teilekatalog und Gruppierung an. Diese Eigenschaften werden mittels einer TL-Script Anweisung berechnet.\ 
model.syn.PartsListEntry = Stücklisteneintrag
model.syn.PartsListEntry.connections = Verbindungen
model.syn.PartsListEntry.costs = Kosten
model.syn.PartsListEntry.count = Anzahl
model.syn.PartsListEntry.materials = Materialien
model.syn.PartsListEntry.part = Einzelteil
model.syn.PartsListEntry.producer = Hersteller
model.syn.PartsListEntry.singlePrice = Einzelpreis
model.syn.Problem = Problem
model.syn.Problem.components = Komponenten
model.syn.Problem.description = Beschreibung
model.syn.Problem.name = Name
model.syn.Problem.solvingActivities = Lösungsmaßnahmen
model.syn.Product = Produkt
model.syn.Product.buildGroup = Build group
model.syn.Product.componentNode = Component node
model.syn.Product.name = Name
model.syn.Product.productId = Produkt-ID
model.syn.Product.tooltip = materielles Gut oder eine (immaterielle) Dienstleistung , die das Ergebnis eines Produktionsprozesses ist. ISO 9000 definiert Produkt als \u201EErgebnis einer Organisation, das ohne jegliche Transaktion zwischen Organisation und Kunden erzeugt werden kann\u201C.\n(Wikipedia, 2025)\nEin Produkt kann ohne weitere Änderung verkauft werden.
model.syn.ProductSelection = Produkt Selektion
model.syn.ProductSelection.country = Land
model.syn.ProductSelection.product = Produkt
model.syn.ProductSelection.productInRevision = Produkt in Revision
model.syn.ProductSelection.referenceDate = Referenzdatum
model.syn.ProductSelection.rule = Regel
model.syn.ProductSelection.tooltip = Stellt eine alte, in der Vergangenheit liegende Version des Produktes dar.\ \ 
model.syn.SinglePart = Einzelteil
model.syn.SinglePart.catalog = Katalog
model.syn.SinglePart.company = Hersteller
model.syn.SinglePart.componentID = Teilenummer
model.syn.SinglePart.material = Material
model.syn.SinglePart.name = Name
model.syn.SinglePart.partNumber = Teilenummer
model.syn.SinglePart.pictures = Bilder
model.syn.SinglePart.tooltip = Ein Einzelteil ist in Syncra ein nicht weiter zerlegbares Objekt, welches als Einheit komplett in Produkten verbaut oder darin anderweitig genutzt wird oder in der Zukunft genutzt werden könnte oder in der Vergangenheit genutzt wurde.
model.syn.TreeRoot = Baumwurzel
model.syn.TreeRoot.tooltip = Technischer Objekttyp, der als Wurzelknoten für die Baumdarstellungen verwendet wird.
