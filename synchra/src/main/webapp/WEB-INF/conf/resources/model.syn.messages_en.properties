model.syn = Synchra
model.syn.Activity = Activity
model.syn.Activity.activityId = Acitvity ID
model.syn.Activity.costs = Costs (\u20AC)
model.syn.Activity.description = Description
model.syn.Activity.effectDate = Effect date
model.syn.Activity.kind = Kind
model.syn.Activity.name = Name
model.syn.Activity.riskCostImpact = Risk cost impact (\u20AC)
model.syn.Activity.riskProbImpact = Risk probability impact
model.syn.Activity.state = State
model.syn.Activity.tooltip = Handlung, Regelung o. Ä., die etwas Bestimmtes bewirken soll.\n\nIm Kontext unserer Applikation verändern Maßnahmen die KPIs, die Komponenten oder Risiken beschreiben (Preis, Eintrittswahrscheinlichkeit,...)
model.syn.Activity.valuations = Valuations
model.syn.ActivityKind = Activity kind
model.syn.ActivityKind.ORGANISATORIC = organisatoric
model.syn.ActivityKind.TECHNICAL = tchnical
model.syn.ActivityState = Activity state
model.syn.ActivityState.DONE = done
model.syn.ActivityState.IDEA = Idea
model.syn.ActivityState.IN_PROGRESS = in progress
model.syn.ActivityState.REJECTED = rejected
model.syn.Company = Company
model.syn.Company.adressInformations = Adress Informations
model.syn.Company.canDeliver = Can deliver
model.syn.Company.contact = Contact
model.syn.Company.contactPerson = Contact Person
model.syn.Company.mayDeliver = may deliver
model.syn.Company.name = Name
model.syn.Company.phone = Phone Number
model.syn.Company.structure = Structure
model.syn.Company.tooltip = Eine BGB-Gesellschaft bzw. eine GbR liegt vor, wenn mindestens zwei Personen vereinbaren, zu einem gemeinsamen Zweck zusammenzuwirken und diesen Zweck zu fördern. Die gesetzliche Grundlage findet sich im Bürgerlichen Gesetzbuch (BGB).\n\n(IHK Frankfurt am Main)\n\nHier auch im Sinne von "Unternehmen" verwendet.\n\nGesellschaften können in unserer Applikation in zwei unterschiedlichen Rollen auftreten: als Hersteller einer Komponente oder als Lieferant einer solchen.\n
model.syn.CompanyStructure = Rechtsform
model.syn.CompanyStructure.AG = AG
model.syn.CompanyStructure.CoKG = Co KG
model.syn.CompanyStructure.GmbH = GmbH
model.syn.Component = Component
model.syn.Component.canBeDelivered = Possible suppliers
model.syn.Component.componentID = Component ID
model.syn.Component.consistsOf = consists of
model.syn.Component.goalGap = Goal Gap
model.syn.Component.goalPrice = Goal price
model.syn.Component.isAffectedByProblem = is Affected By Problem
model.syn.Component.name = Name
model.syn.Component.pictures = Pictures
model.syn.Component.price = Price
model.syn.Component.priceActivityContribution = Own contrib price A
model.syn.Component.priceActivityPrognose = Own contrib price Prognose
model.syn.Component.priceAfterActivities = Plan
model.syn.Component.prognose = Prognose
model.syn.Component.risks = Risks
model.syn.Component.supplier = Supplier
model.syn.Component.suppliers = Suppliers
model.syn.Component.tooltip = Als Komponente bezeichnen wir eine Verallgemeinerung (im Sinne der objektorientierten Modellierung: Obertyp oder auch Superentitätstyp) von Baugruppen und Einzelteilen. Die Komponente vererbt Ihre Eigenschaften an Baugruppe und Einzelteil.
model.syn.Component.used = used in
model.syn.Component.weight = Weight (kg)
model.syn.Component.weightActivityContribution = Own contrib weight A
model.syn.Component.weightAfterActivities = Gewicht nach Maßnahmen
model.syn.ComponentNode = Component Node
model.syn.ComponentNode.children = Children
model.syn.ComponentNode.component = Component
model.syn.ComponentNode.connection = Connection
model.syn.ComponentNode.goalPrice = Goal Price
model.syn.ComponentNode.name = Name
model.syn.ComponentNode.parent = Parent
model.syn.ComponentNode.price = Price
model.syn.ComponentNode.priceActivityContribution = Own contrib price A
model.syn.ComponentNode.priceActivityPrognose = Own part activity prognose
model.syn.ComponentNode.priceAfterActivities = Plan
model.syn.ComponentNode.product = Product
model.syn.ComponentNode.prognose = Prognose
model.syn.Connection = Connection
model.syn.Connection.consistsOf = consists of
model.syn.Connection.countries = Countries
model.syn.Connection.position = Position
model.syn.Connection.rule = Rule
model.syn.Connection.tooltip = Die Verbindung ist die Auflösung der n:m-Beziehung Komponente besteht aus Komponente und bildet einen kreislosen! gerichteten Graphen, dessen Wurzel jeweils das Produkt ist und dessen Blätter die Einzelteile sind
model.syn.Connection.used = used in
model.syn.ConstructionGroup = Construction Group
model.syn.ConstructionGroup.componentID = Build group no
model.syn.ConstructionGroup.consistsOf = consists of
model.syn.ConstructionGroup.constructionGroupId = Construction group ID
model.syn.ConstructionGroup.goalPrice = Goal Price
model.syn.ConstructionGroup.price = Price
model.syn.ConstructionGroup.priceAfterActivities = Plan
model.syn.ConstructionGroup.prognose = Prognose
model.syn.ConstructionGroup.tooltip = Eine Baugruppe (lt. DIN 199 kurz Gruppe genannt) ist ein in sich geschlossener, aus zwei oder mehr Einzelteilen oder Baugruppen niederer Ordnung bestehender Gegenstand, der in der Regel wieder zerlegbar ist (s. DIN 199 Technische Produktdokumentation).\n(Wikipedia, 2025)\nZur Vereinfachung wollen wir hier annehmen, dass auch an sich fixe Zusammenfügungen wie z.B. eine Verschweißung oder Verklebung \u201Eprinzipiell\u201C wieder trennbar sind.\nSomit entspricht auch das Produkt einer Baugruppe (und auch eine Komponente, siehe 1.1.2) und eine Baugruppe kann auch max. einem Produkt entsprechen (vergl. die BMW-Motoren, die auch an andere Marktteilnehmer verkauft wurden). Zu jedem Produkt muss es eine Baugruppe geben.\nJe nach betrieblicher Anforderung kann es sein, dass eine Baugruppe zunächst \u201Eleer\u201C ist, also keine untergeordnete Baugruppe und keine Teile enthält. Dies kann z.B. bei einer Top-Down-Konstruktion so vorkommen. Ziel der Konstruktionsarbeit muss es dann sein, die am Anfang leere Baugruppe zu befüllen.\n
model.syn.ConstructionGroup.weight = Weight
model.syn.ConstructionGroup.weightAfterActivities = Weight after activities
model.syn.ContactPerson = Contact Person
model.syn.Country = Country
model.syn.Country.name = Name
model.syn.Material = Material
model.syn.Material.name = Name
model.syn.PartCatalog = Teilekatalog
model.syn.PartCatalog.materialCompany = Material company
model.syn.PartCatalog.materialGroups = Materialgruppierung
model.syn.PartCatalog.name = Name
model.syn.PartCatalog.partGroups = Gesellschaftsgruppierung
model.syn.PartCatalog.parts = Teile
model.syn.PartCatalog.tooltip = Ein Teilekatalog enthält Einzelteile. Dabei ist es möglich, einen Katalog in unterschiedliche Kategorien hierarchisch aufzuteilen. Es gibt ansonsten keine Einschränkungen für die Verwendung von Teilekatalogen. Insbesondere muss sich ein Teilekatalog nicht auf ein Produkt beziehen. Ein Teilekatalog hat einen Namen, und zeigt die Teile in einer vorbestimmten Hierarchie der Kategorien an (Anforderung an die Oberfläche!)
model.syn.PartsGroup = Gruppierung
model.syn.PartsGroup.name = Name
model.syn.PartsGroup.parts = Parts
model.syn.PartsGroup.tooltip = Es wird ein Objekttyp \u201EGruppierung\u201C eingeführt, der lediglich mit einem Namen attributiert ist und eine n:m-Relation zum generischen Fachobjekttyp \u201EFachobjekt\u201C hat. Zusätzlich legen wir für jede gewünschte Kombination aus Gruppierungen, die unsere Teilekataloge anzeigen sollen, eine n:m-Relation zwischen Teilekatalog und Gruppierung an. Diese Eigenschaften werden mittels einer TL-Script Anweisung berechnet.\ 
model.syn.PartsListEntry = Parts List Entry
model.syn.PartsListEntry.connections = Connections
model.syn.PartsListEntry.costs = Costs
model.syn.PartsListEntry.count = Count
model.syn.PartsListEntry.materials = Materials
model.syn.PartsListEntry.part = Part
model.syn.PartsListEntry.producer = Producer
model.syn.PartsListEntry.singlePrice = Single Price
model.syn.Problem = Problem
model.syn.Problem.components = Components
model.syn.Problem.description = Description
model.syn.Problem.name = Name
model.syn.Problem.solvingActivities = Solving activities
model.syn.Product = Product
model.syn.Product.buildGroup = Build group
model.syn.Product.componentNode = Component node
model.syn.Product.name = Name
model.syn.Product.productId = Product ID
model.syn.Product.tooltip = materielles Gut oder eine (immaterielle) Dienstleistung , die das Ergebnis eines Produktionsprozesses ist. ISO 9000 definiert Produkt als \u201EErgebnis einer Organisation, das ohne jegliche Transaktion zwischen Organisation und Kunden erzeugt werden kann\u201C.\n(Wikipedia, 2025)\nEin Produkt kann ohne weitere Änderung verkauft werden.
model.syn.ProductSelection = Product Selection
model.syn.ProductSelection.country = Country
model.syn.ProductSelection.product = Product
model.syn.ProductSelection.productInRevision = Product in revision
model.syn.ProductSelection.referenceDate = Reference Date
model.syn.ProductSelection.rule = Rule
model.syn.ProductSelection.tooltip = Stellt eine alte, in der Vergangenheit liegende Version des Produktes dar.\ \ 
model.syn.SinglePart = Einzelteil
model.syn.SinglePart.catalog = Catalog
model.syn.SinglePart.company = Company
model.syn.SinglePart.componentID = Part number
model.syn.SinglePart.material = Material
model.syn.SinglePart.name = Name
model.syn.SinglePart.partNumber = Part number
model.syn.SinglePart.pictures = Pictures
model.syn.SinglePart.tooltip = Ein Einzelteil ist in Syncra ein nicht weiter zerlegbares Objekt, welches als Einheit komplett in Produkten verbaut oder darin anderweitig genutzt wird oder in der Zukunft genutzt werden könnte oder in der Vergangenheit genutzt wurde.
model.syn.TreeRoot = Tree root
model.syn.TreeRoot.tooltip = Technischer Objekttyp, der als Wurzelknoten für die Baumdarstellungen verwendet wird.
